{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Efficient implementations of Needleman-Wunsch and other sequence alignment algorithms written in Rust with Python bindings via PyO3.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install sequence_align\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>seq_a = [\"G\", \"A\", \"T\", \"T\", \"A\", \"C\", \"A\"]\nseq_b = [\"G\", \"C\", \"A\", \"T\", \"G\", \"C\", \"G\"]\n\naligned_seq_a, aligned_seq_b = needleman_wunsch(\n    seq_a,\n    seq_b,\n    match_score=1.0,\n    mismatch_score=-1.0,\n    indel_score=-1.0,\n    gap=\"_\",\n)\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#needleman-wunsch","title":"Needleman-Wunsch","text":"<pre><code>seq_a = [\"G\", \"A\", \"T\", \"T\", \"A\", \"C\", \"A\"]\nseq_b = [\"G\", \"C\", \"A\", \"T\", \"G\", \"C\", \"G\"]\n\naligned_seq_a, aligned_seq_b = needleman_wunsch(\n    seq_a,\n    seq_b,\n    match_score=1.0,\n    mismatch_score=-1.0,\n    indel_score=-1.0,\n    gap=\"_\",\n)\n\n# Expects [\"G\", \"_\", \"A\", \"T\", \"T\", \"A\", \"C\", \"A\"]\nprint(aligned_seq_a)\n\n# Expects [\"G\", \"C\", \"A\", \"_\", \"T\", \"G\", \"C\", \"G\"]\nprint(aligned_seq_b)\n</code></pre>"},{"location":"examples/#hirschberg","title":"Hirschberg","text":"<pre><code>seq_a = [\"A\", \"G\", \"T\", \"A\", \"C\", \"G\", \"C\", \"A\"]\nseq_b = [\"T\", \"A\", \"T\", \"G\", \"C\"]\n\naligned_seq_a, aligned_seq_b = hirschberg(\n    seq_a,\n    seq_b,\n    match_score=2.0,\n    mismatch_score=-1.0,\n    indel_score=-2.0,\n    gap=\"_\",\n)\n\n# Expects [\"A\", \"G\", \"T\", \"A\", \"C\", \"G\", \"C\", \"A\"]\nprint(aligned_seq_a)\n\n# Expects [\"_\", \"_\", \"T\", \"A\", \"T\", \"G\", \"C\", \"_\"]\nprint(aligned_seq_b)\n</code></pre>"}]}